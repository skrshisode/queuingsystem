#!/usr/bin/env node

const cluster = require('cluster');
const http = require('http');
const port = normalizePort(process.env.PORT || '3000');

// Code to run if we're in the master process
if (cluster.isMaster) {

    // Count the number of CPUs on the instance
  const cpuCount = require('os').cpus().length;

    // Create a worker for each CPU
  for (let i = 0; i < cpuCount; i += 1) {
    cluster.fork();
  }

  cluster.on('online', function(worker) {
    console.log('Worker with pid ', worker.process.pid, ' is online.');
  });
  cluster.on('exit', function(worker, code, signal) {
    console.log('Received ', signal);
    console.log('Worker with pid ', worker.process.pid, ' died.');
    cluster.fork();
  });

    // Run app if we're in a worker process
}
else {
  const app = require('../app');
  const broker = require('../scripts/broker')(
    'amqp://root:root@' + (process.env.RABBITMQ_HOST || 'localhost') + ':5672',
    {
      exchange: 'trips',
      consumer: true
    });

  app.set('port', port);
  app.set('worker', cluster.worker);

  broker.once('connected', () => {
    global.broker = broker;
    /**
     * Create HTTP server.
     */
    const server = http.createServer(app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', () => {

      const addr = server.address();
      const bind = typeof addr === 'string' ?
          'pipe ' + addr :
          'port ' + addr.port;

      console.log('Listening on ' + bind);
    });
  });
  broker.once('disconnected', exit.bind(this, 'disconnected')); //check `this`
  process.on('SIGTERM', exit);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind, ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind, ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function exit(reason) {
  console.log('Exiting because of ', reason);
  process.exit();
}
